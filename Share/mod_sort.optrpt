Global optimization report for : mod_sort._
=================================================================

Global optimization report for : mod_sort_mp_sort_int32_

LOOP BEGIN at mod_sort.F90 (64, 10)
    remark #15344: Loop was not vectorized: vector dependence prevents vectorization
    remark #15346: vector dependence: assumed FLOW dependence between (64:10) and (64:10) 
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_sort_int64_

LOOP BEGIN at mod_sort.F90 (76, 10)
    remark #15344: Loop was not vectorized: vector dependence prevents vectorization
    remark #15346: vector dependence: assumed FLOW dependence between (76:10) and (76:10) 
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_sort_real32_

LOOP BEGIN at mod_sort.F90 (87, 10)
    remark #15344: Loop was not vectorized: vector dependence prevents vectorization
    remark #15346: vector dependence: assumed FLOW dependence between (87:10) and (87:10) 
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_sort_real64_

LOOP BEGIN at mod_sort.F90 (98, 10)
    remark #15344: Loop was not vectorized: vector dependence prevents vectorization
    remark #15346: vector dependence: assumed FLOW dependence between (98:10) and (98:10) 
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_quicksort_int32_

LOOP BEGIN at mod_sort.F90 (115, 7)

    LOOP BEGIN at mod_sort.F90 (115, 7)
        remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
    LOOP END

    LOOP BEGIN at mod_sort.F90 (118, 7)
        remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
    LOOP END
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_quicksort_int64_

LOOP BEGIN at mod_sort.F90 (146, 7)

    LOOP BEGIN at mod_sort.F90 (146, 7)
        remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
    LOOP END

    LOOP BEGIN at mod_sort.F90 (149, 7)
        remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
    LOOP END
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_quicksort_real32_

LOOP BEGIN at mod_sort.F90 (177, 7)

    LOOP BEGIN at mod_sort.F90 (177, 7)
        remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
    LOOP END

    LOOP BEGIN at mod_sort.F90 (180, 7)
        remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
    LOOP END
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_quicksort_real64_

LOOP BEGIN at mod_sort.F90 (208, 7)

    LOOP BEGIN at mod_sort.F90 (208, 7)
        remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
    LOOP END

    LOOP BEGIN at mod_sort.F90 (211, 7)
        remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
    LOOP END
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_msi_r8_

LOOP BEGIN at mod_sort.F90 (235, 5)
<Multiversioned v1>
<Multiversioned v1>
    remark #25228: Loop multiversioned for Data Dependence
    remark #25399: memcopy generated
    remark #25562: The loop has been multiversioned for the small trip count
LOOP END

LOOP BEGIN at mod_sort.F90 (226, 14)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (234, 10)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (235, 5)
    remark #15553: loop was not vectorized: outer loop is not an auto-vectorization candidate.

    LOOP BEGIN at mod_sort.F90 (235, 5)
        remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
    LOOP END
LOOP END

LOOP BEGIN at mod_sort.F90 (235, 5)
<Multiversioned v2>
    remark #15319: Loop was not vectorized: novector directive used
LOOP END

LOOP BEGIN at mod_sort.F90 (235, 5)
<Multiversioned v2>
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (248, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_msi_r4_

LOOP BEGIN at mod_sort.F90 (260, 5)
<Multiversioned v1>
<Multiversioned v1>
    remark #25228: Loop multiversioned for Data Dependence
    remark #25399: memcopy generated
    remark #25562: The loop has been multiversioned for the small trip count
LOOP END

LOOP BEGIN at mod_sort.F90 (251, 14)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (259, 10)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (260, 5)
    remark #15553: loop was not vectorized: outer loop is not an auto-vectorization candidate.

    LOOP BEGIN at mod_sort.F90 (260, 5)
        remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
    LOOP END
LOOP END

LOOP BEGIN at mod_sort.F90 (260, 5)
<Multiversioned v2>
    remark #15319: Loop was not vectorized: novector directive used
LOOP END

LOOP BEGIN at mod_sort.F90 (260, 5)
<Multiversioned v2>
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (273, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_msi_i4_

LOOP BEGIN at mod_sort.F90 (285, 5)
<Multiversioned v1>
<Multiversioned v1>
    remark #25228: Loop multiversioned for Data Dependence
    remark #25399: memcopy generated
    remark #25562: The loop has been multiversioned for the small trip count
LOOP END

LOOP BEGIN at mod_sort.F90 (276, 14)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (284, 10)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (285, 5)
    remark #15553: loop was not vectorized: outer loop is not an auto-vectorization candidate.

    LOOP BEGIN at mod_sort.F90 (285, 5)
        remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
    LOOP END
LOOP END

LOOP BEGIN at mod_sort.F90 (285, 5)
<Multiversioned v2>
    remark #15319: Loop was not vectorized: novector directive used
LOOP END

LOOP BEGIN at mod_sort.F90 (285, 5)
<Multiversioned v2>
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (298, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_argsort_r8_

LOOP BEGIN at mod_sort.F90 (308, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (312, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (315, 14)
    remark #15553: loop was not vectorized: outer loop is not an auto-vectorization candidate.

    LOOP BEGIN at mod_sort.F90 (315, 14)
        remark #15344: Loop was not vectorized: vector dependence prevents vectorization
        remark #15346: vector dependence: assumed FLOW dependence between (315:14) and (315:14) 
        remark #15346: vector dependence: assumed FLOW dependence between (315:14) and (315:14) 
        remark #15346: vector dependence: assumed FLOW dependence between (315:14) and (315:14) 
        remark #15346: vector dependence: assumed FLOW dependence between (315:14) and (315:14) 
    LOOP END
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_argsort_r4_

LOOP BEGIN at mod_sort.F90 (334, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (338, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (341, 14)
    remark #15553: loop was not vectorized: outer loop is not an auto-vectorization candidate.

    LOOP BEGIN at mod_sort.F90 (341, 14)
        remark #15344: Loop was not vectorized: vector dependence prevents vectorization
        remark #15346: vector dependence: assumed FLOW dependence between (341:14) and (341:14) 
        remark #15346: vector dependence: assumed FLOW dependence between (341:14) and (341:14) 
        remark #15346: vector dependence: assumed FLOW dependence between (341:14) and (341:14) 
        remark #15346: vector dependence: assumed FLOW dependence between (341:14) and (341:14) 
    LOOP END
LOOP END
=================================================================

Global optimization report for : mod_sort_mp_argsort_i4_

LOOP BEGIN at mod_sort.F90 (360, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (364, 5)
    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_sort.F90 (367, 14)
    remark #15553: loop was not vectorized: outer loop is not an auto-vectorization candidate.

    LOOP BEGIN at mod_sort.F90 (367, 14)
        remark #15344: Loop was not vectorized: vector dependence prevents vectorization
        remark #15346: vector dependence: assumed FLOW dependence between (367:14) and (367:14) 
        remark #15346: vector dependence: assumed FLOW dependence between (367:14) and (367:14) 
        remark #15346: vector dependence: assumed FLOW dependence between (367:14) and (367:14) 
    LOOP END
LOOP END
=================================================================

---- Begin Inlining Report ----
Option Values:
  inline-threshold: 225
  inlinehint-threshold: 325
  inlinecold-threshold: 45
  inlineoptsize-threshold: 15

COMPILE FUNC: mod_sort_mp_msi_r8_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (226,14)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (226,14)
   -> DELETE: for_deallocate_handle /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (226,14)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (234,5)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (234,5)
   -> llvm.smax.i32 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (226,14)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (235,5)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (235,5)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (236,5)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (236,5)
   -> mod_sort_mp_argsort_r8_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (236,12)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (237,5)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (230,47)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (230,47)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (226,14)
   -> llvm.memcpy.p0.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (235,5)

COMPILE FUNC: mod_sort_mp_argsort_r8_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (301,12)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (301,12)
   -> DELETE: for_deallocate_handle /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (301,12)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (309,5)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (301,12)

COMPILE FUNC: mod_sort_mp_msi_r4_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (251,14)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (251,14)
   -> DELETE: for_deallocate_handle /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (251,14)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (259,5)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (259,5)
   -> llvm.smax.i32 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (251,14)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (260,5)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (260,5)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (261,5)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (261,5)
   -> mod_sort_mp_argsort_r4_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (261,12)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (262,5)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (255,47)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (255,47)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (251,14)
   -> llvm.memcpy.p0.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (260,5)

COMPILE FUNC: mod_sort_mp_argsort_r4_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (327,12)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (327,12)
   -> DELETE: for_deallocate_handle /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (327,12)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (335,5)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (327,12)

COMPILE FUNC: mod_sort_mp_msi_i4_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (276,14)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (276,14)
   -> DELETE: for_deallocate_handle /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (276,14)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (284,5)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (284,5)
   -> llvm.smax.i32 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (276,14)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (285,5)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (285,5)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (286,5)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (286,5)
   -> mod_sort_mp_argsort_i4_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (286,12)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (287,5)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (280,50)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (280,50)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (276,14)
   -> llvm.memcpy.p0.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (285,5)

COMPILE FUNC: mod_sort_mp_argsort_i4_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (353,12)
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (353,12)
   -> DELETE: for_deallocate_handle /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (353,12)
   -> DELETE: llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (361,5)
   -> llvm.memset.p0.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (353,12)
   -> llvm.smin.i32 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (367,14)

COMPILE FUNC: mod_sort._

COMPILE FUNC: mod_sort_mp_quicksort_int32_
   -> mod_sort_mp_quicksort_int32_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (128,12)
   -> mod_sort_mp_quicksort_int32_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (129,12)

COMPILE FUNC: mod_sort_mp_sort_int32_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (63,5)
   -> mod_sort_mp_quicksort_int32_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (66,10)

COMPILE FUNC: mod_sort_mp_quicksort_int64_
   -> mod_sort_mp_quicksort_int64_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (159,12)
   -> mod_sort_mp_quicksort_int64_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (160,12)

COMPILE FUNC: mod_sort_mp_sort_int64_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (74,5)
   -> mod_sort_mp_quicksort_int64_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (77,10)

COMPILE FUNC: mod_sort_mp_quicksort_real32_
   -> mod_sort_mp_quicksort_real32_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (190,12)
   -> mod_sort_mp_quicksort_real32_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (191,12)

COMPILE FUNC: mod_sort_mp_sort_real32_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (85,5)
   -> mod_sort_mp_quicksort_real32_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (88,10)

COMPILE FUNC: mod_sort_mp_quicksort_real64_
   -> mod_sort_mp_quicksort_real64_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (221,12)
   -> mod_sort_mp_quicksort_real64_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (222,12)

COMPILE FUNC: mod_sort_mp_sort_real64_
   -> llvm.smax.i64 /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (96,5)
   -> mod_sort_mp_quicksort_real64_ /scratch_local/ifx1128369934XJPVY6/ifxEBYVVT.i90 (99,10)

---- End Inlining Report ------
